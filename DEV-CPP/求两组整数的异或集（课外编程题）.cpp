/*
【问题描述】
从标准输入中输入两组整数(每行不超过20个整数，每组整数中元素不重复),合并两组整数，去掉在两组整数中都出现的整数，并按从大到小顺序排序输出（即两组整数集&ldquo;异或&rdquo;）。
【输入形式】
首先输入第一组整数的个数，然后在下一行输入第一组整数，以一个空格分隔各个整数；然后以同样的方式输入第二组整数。
【输出形式】
按从大到小顺序排序输出合并后的整数集（去掉在两组整数中都出现的整数，以一个空格分隔各个整数）。
【样例输入】
8
5 1 4 32 8 7 9 -6
5
5 2 87 10 1
【样例输出】
87 32 10 9 8 7 4 2 -6
【样例说明】
第一组整数有8个，分别为5   1   4   32   8   7   9   -6，第二组整数有5个，分别为5   2   87   10   1。将第一组和第二组整数合并（去掉在两组整数中都出现的整数5和1），并从大到小顺序排序后结果为87   32   10   9   8   7   4   2   -6。
【评分标准】该题要求输出两组整数的异或集，共有5个测试点，提交程序文件名为xor.c。
*/
#include<stdio.h>
#include<stdlib.h>
int cmp(const void*a,const void*b)
{
	return *(int *)a<*(int *)b?1:-1;
}
int main()
{
	int t=0,m,n,i,j,a[20],b[20],c[50],flag=0;
	scanf("%d",&m);
	for(i=0;i<m;i++)
		scanf("%d",&a[i]);
	scanf("%d",&n);
	for(i=0;i<n;i++)
		scanf("%d",&b[i]);
	for(i=0;i<m;i++)
	{	flag=0;
		for(j=0;j<n;j++)
			if(a[i]==b[j]) {flag=1;break;}
		if(flag==0) c[t++]=a[i];	
	}
	for(i=0;i<n;i++)
	{	flag=0;
		for(j=0;j<m;j++)
			if(b[i]==a[j]) {flag=1;break;}
		if(flag==0) c[t++]=b[i];
	}
	qsort(c,t,sizeof(int),cmp);
	for(i=0;i<t;i++)
		printf("%d ",c[i]);
	return 0;
}